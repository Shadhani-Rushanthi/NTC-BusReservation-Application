openapi: 3.0.0
info:
  title: Bus Reservation System - Auth API
  description: Authentication and registration routes for admins, bus operators, and commuters.
  version: 1.0.0

servers:
  - url: https://api-df69.onrender.com
    description: Local server
    
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Optional, but indicates the token format

security:
  - bearerAuth: [] # Apply globally if most endpoints require authentication

tags:
  - name: Auth
    description: Authentication and registration operations.
  - name: Admin
    description: Administrative operations for managing the system.
  - name: Bus Operator
    description: Operations available to bus operators.
  - name: Commuter
    description: Operations available to commuters.

paths:

# auth route API end points
  /auth/adminRegister:
    post:
      tags:
        - Auth
      summary: Register a new admin
      description: Registers a new admin in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  description: Admin's username.
                  example: "admin123"
                email:
                  type: string
                  description: Admin's email address.
                  example: "admin@example.com"
                password:
                  type: string
                  description: Admin's password.
                  example: "securePassword123"
      responses:
        '200':
          description: Admin created successfully.
          content:
            application/json:
              schema:
                type: string
                example: "12345 Admin created Successfully"
        '409':
          description: Conflict. Email already exists.
          content:
            application/json:
              schema:
                type: string
                example: "Admin email already exists."
        '500':
          description: Internal server error. Registration failed.
          content:
            application/json:
              schema:
                type: string
                example: "Registration Failed."

  /auth/busOperatorRegister:
    post:
      tags:
        - Auth
      summary: Register a new bus operator
      description: Registers a new bus operator in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                businessName:
                  type: string
                  description: Business name of the bus operator.
                  example: "Speedy Transport"
                email:
                  type: string
                  description: Bus operator's email address.
                  example: "operator@example.com"
                password:
                  type: string
                  description: Bus operator's password.
                  example: "securePassword123"
                location:
                  type: string
                  description: Location of the business.
                  example: "New York"
                NoOfBusses:
                  type: integer
                  description: Number of buses operated.
                  example: 5
      responses:
        '200':
          description: Bus operator registered successfully.
          content:
            application/json:
              schema:
                type: string
                example: "The Business Id is 12345. The Business Speedy Transport waiting for approval."
        '409':
          description: Conflict. Business name already exists.
          content:
            application/json:
              schema:
                type: string
                example: "Business name already exists."
        '500':
          description: Internal server error. Registration failed.
          content:
            application/json:
              schema:
                type: string
                example: "Registration Failed."

  /auth/commuterRegister:
    post:
      tags:
        - Auth
      summary: Register a new commuter
      description: Registers a new commuter in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Commuter's first name.
                  example: "John"
                lastName:
                  type: string
                  description: Commuter's last name.
                  example: "Doe"
                email:
                  type: string
                  description: Commuter's email address.
                  example: "commuter@example.com"
                password:
                  type: string
                  description: Commuter's password.
                  example: "securePassword123"
      responses:
        '200':
          description: Commuter registered successfully.
          content:
            application/json:
              schema:
                type: string
                example: "12345 Commuter created Successfully"
        '409':
          description: Conflict. Email already exists.
          content:
            application/json:
              schema:
                type: string
                example: "Commuter email already exists."
        '500':
          description: Internal server error. Registration failed.
          content:
            application/json:
              schema:
                type: string
                example: "Registration Failed."

  /auth/adminLogin/{email}/{password}:
    post:
      tags:
        - Auth
      summary: Admin login
      description: Allows an admin to log into the system.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          description: Admin's email address.
        - name: password
          in: path
          required: true
          schema:
            type: string
          description: Admin's password.
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token.
                    example: "eyJhbGci...base64token"
        '401':
          description: Unauthorized. Invalid email or password.
          content:
            application/json:
              schema:
                type: string
                example: "Incorrect Password"

  /auth/busOperatorLogin/{email}/{password}:
    post:
      tags:
        - Auth
      summary: Bus operator login
      description: Allows a bus operator to log into the system.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          description: Bus operator's email address.
        - name: password
          in: path
          required: true
          schema:
            type: string
          description: Bus operator's password.
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token.
                    example: "eyJhbGci...base64token"
        '401':
          description: Unauthorized. Invalid email or password.
          content:
            application/json:
              schema:
                type: string
                example: "Incorrect Password"

  /auth/commutorLogin/{email}/{password}:
    post:
      tags:
        - Auth
      summary: Commuter login
      description: Allows a commuter to log into the system.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
          description: Commuter's email address.
        - name: password
          in: path
          required: true
          schema:
            type: string
          description: Commuter's password.
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token.
                    example: "eyJhbGci...base64token"
        '401':
          description: Unauthorized. Invalid email or password.
          content:
            application/json:
              schema:
                type: string
                example: "Incorrect Password"


# Admin route API endpoints

  /admin/GetPendingBusOperators:
    get:
      tags:
        - Admin
      summary: Get pending bus operators
      description: Retrieve all bus operators with a pending status for approval.
      responses:
        '200':
          description: Successfully retrieved pending bus operators.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessName:
                      type: string
                      description: Business name of the operator.
                    email:
                      type: string
                      description: Email address of the operator.
                    location:
                      type: string
                      description: Location of the operator.
                    NoOfBusses:
                      type: integer
                      description: Number of buses owned by the operator.
                    createdAt:
                      type: string
                      format: date-time
                      description: Registration date.
        '500':
          description: Internal server error.

  /admin/getBusDetailsForApproval:
    get:
      tags:
        - Admin
      summary: Get bus details pending approval
      description: Retrieve bus details submitted by operators that are pending approval.
      responses:
        '200':
          description: Successfully retrieved bus details.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessName:
                      type: string
                      description: Business name of the operator.
                    busDetails:
                      type: array
                      items:
                        type: object
                        properties:
                          busNo:
                            type: string
                            description: Bus number.
                          status:
                            type: integer
                            description: Current status of the bus.

  /admin/ApproveOrRejectBusOperator/{id}/{status}:
    put:
      tags:
        - Admin
      summary: Approve or reject a bus operator
      description: Approve or reject a bus operator based on their ID and the status provided.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the bus operator.
        - name: status
          in: path
          required: true
          schema:
            type: number
            enum: [2, 3]
          description: Approval or rejection status.
      responses:
        '200':
          description: Status updated successfully.
        '404':
          description: Bus operator not found.

  /admin/ApproveOrRejectBusDetails/{id}/{busNo}/{status}:
    put:
      tags:
        - Admin
      summary: Approve or reject bus details
      description: Approve or reject a specific bus detail for a bus operator.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID of the bus operator.
        - name: busNo
          in: path
          required: true
          schema:
            type: string
          description: Bus number.
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum: [2, 3]
          description: Approval or rejection status.
      responses:
        '200':
          description: Bus details updated successfully.
        '404':
          description: Bus details not found.

  /admin/ViewRegisteredBusOperators:
    get:
      tags:
        - Admin
      summary: Get registered bus operators
      description: Retrieve all approved bus operators.
      responses:
        '200':
          description: Successfully retrieved approved bus operators.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessName:
                      type: string
                      description: Business name of the operator.
                    email:
                      type: string
                      description: Email address of the operator.
                    location:
                      type: string
                      description: Location of the operator.
                    NoOfBusses:
                      type: integer
                      description: Number of buses owned by the operator.
                    busDetails:
                      type: array
                      items:
                        type: object
                        properties:
                          busNo:
                            type: string
                            description: Bus number.
                    createdAt:
                      type: string
                      format: date-time
                      description: Registration date.

  /admin/ViewRejectedBusOperators:
    get:
      tags:
        - Admin
      summary: Get rejected bus operators
      description: Retrieve all rejected bus operators.
      responses:
        '200':
          description: Successfully retrieved rejected bus operators.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    businessName:
                      type: string
                      description: Business name of the operator.
                    email:
                      type: string
                      description: Email address of the operator.
                    location:
                      type: string
                      description: Location of the operator.
                    NoOfBusses:
                      type: integer
                      description: Number of buses owned by the operator.
                    busDetails:
                      type: array
                      items:
                        type: object
                        properties:
                          busNo:
                            type: string
                            description: Bus number.
                    createdAt:
                      type: string
                      format: date-time
                      description: Registration date.

  /admin/addBusRoutes:
    post:
      tags:
        - Admin
      summary: Add a new bus route
      description: Add a new route to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                routeId:
                  type: integer
                  description: Unique identifier for the route.
                  example: 01
                routeStart:
                  type: string
                  description: Starting point of the route.
                  example: "City A"
                routeEnd:
                  type: string
                  description: Ending point of the route.
                  example: "City B"
      responses:
        '200':
          description: Route added successfully.
        '409':
          description: Route already exists.
        '500':
          description: Internal server error.

# busOperator route API endpoint

  /busOperator/editBusOperator:
    post:
      tags:
        - Bus Operator
      summary: Edit bus operator details
      description: Updates the details of a bus operator.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: ID of the bus operator.
                  example: "63a45b6e4c3a2c0012f5e89d"
                businessName:
                  type: string
                  description: Updated business name.
                  example: "New Express Transport"
                email:
                  type: string
                  description: Updated email address.
                  example: "operator@example.com"
                password:
                  type: string
                  description: Updated password (optional).
                  example: "newPassword123"
                location:
                  type: string
                  description: Updated location.
                  example: "New York"
                NoOfBusses:
                  type: integer
                  description: Number of buses owned.
                  example: 5
      responses:
        '200':
          description: Bus operator details updated successfully.
        '404':
          description: Bus operator not found.

  /busOperator/addBuses:
    post:
      tags:
        - Bus Operator
      summary: Add buses for approval
      description: Adds a new bus under a bus operator's management and sends it for approval.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                PermitNo:
                  type: string
                  description: Permit number of the bus.
                  example: "12345ABC"
                busNo:
                  type: string
                  description: Bus number.
                  example: "NY-1234"
                noOfSeats:
                  type: integer
                  description: Number of seats.
                  example: 50
                condition:
                  type: string
                  description: Condition of the bus.
                  example: "Luxury"
                routeID:
                  type: string
                  description: Route ID.
                  example: "RT001"
                structure:
                  type: string
                  description: Structure of the bus.
                  example: "2x2"
      responses:
        '200':
          description: Bus added and sent for approval.
        '404':
          description: Bus operator not found.
        '409':
          description: Duplicate bus number or permit number.

  /busOperator/scheduleABus:
    post:
      tags:
        - Bus Operator
      summary: Schedule a bus
      description: Schedules a bus for specific dates and times.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                busid:
                  type: string
                  description: ID of the bus to schedule.
                  example: "63a45b6e4c3a2c0012f5e89d"
                date:
                  type: string
                  format: date
                  description: Date of the schedule.
                  example: "2024-12-30"
                routeID:
                  type: number
                  description: route not.
                  example: 01
                startTime:
                  type: string
                  format: time
                  description: Start time.
                  example: "08:00:00"
                endTime:
                  type: string
                  format: time
                  description: End time.
                  example: "10:00:00"
                startFrom:
                  type: string
                  description: Starting location.
                  example: "City A"
                endFrom:
                  type: string
                  description: Ending location.
                  example: "City B"
                price:
                  type: number
                  description: Ticket price.
                  example: 15.50
                driverName:
                  type: string
                  description: Name of the driver.
                  example: "John Doe"
                driverLicenseNo:
                  type: string
                  description: Driver's license number.
                  example: "D123456"
                conductorName:
                  type: string
                  description: Name of the conductor.
                  example: "Jane Smith"
                conductorId:
                  type: string
                  description: Conductor's ID.
                  example: "C78901"
                noOfSeats:
                  type: number
                  description: No. of seats in the bus
                  example: 49
      responses:
        '200':
          description: Bus scheduled successfully.
        '409':
          description: Bus already scheduled for this time.

  /busOperator/viewBOBusdetails:
    get:
      tags:
        - Bus Operator
      summary: View bus operator bus details
      description: Retrieve bus details for a specific bus operator.
      responses:
        '200':
          description: Successfully retrieved bus details.
        '404':
          description: No buses found for this operator.

  /busOperator/viewBusSchedules/{busid}:
    get:
      tags:
        - Bus Operator
      summary: View bus schedules
      description: Retrieves all schedules for a specific bus.
      parameters:
        - name: busid
          in: path
          required: true
          schema:
            type: string
          description: ID of the bus.
          example: "63a45b6e4c3a2c0012f5e89d"
      responses:
        '200':
          description: Successfully retrieved bus schedules.
        '404':
          description: No schedules found for this bus.

  /busOperator/viewBusSeatReservations/{runTimeId}:
    get:
      tags:
        - Bus Operator
      summary: View bus seat reservations
      description: Retrieves seat reservations for a specific runtime.
      parameters:
        - name: runTimeId
          in: path
          required: true
          schema:
            type: string
          description: Runtime ID of the bus.
          example: "R12345"
      responses:
        '200':
          description: Successfully retrieved seat reservations.
        '404':
          description: No reservations found for this runtime.
 
# commutor.js

  /commutor/searchBusses:
    post:
      tags:
        - Commuter
      summary: Search buses
      description: Search for available buses based on criteria (implementation specifics may vary).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  description: Date of the schedule.
                  example: "2024-12-30"
                startFrom:
                  type: string
                  description: Starting location
                  example: "city A"
                endFrom:
                  type: string
                  description: Starting location
                  example: "city A"
      responses:
        '200':
          description: Successfully retrieved search results.
        '500':
          description: Internal server error.

  /commutor/reserveSeat:
    post:
      tags:
        - Commuter
      summary: Reserve a seat
      description: Reserve a seat on a bus for a specific runtime.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                runTimeId:
                  type: string
                  description: Runtime ID of the bus.
                  example: "R12345"
                bookedSeatNumbers:
                  type: array
                  items:
                    type: integer
                  description: List of seat numbers to book.
                  example: [1, 2, 3]
                SeatProce:
                  type: number
                  description: Price per seat.
                  example: 15.50
                PaymentCompleted:
                  type: boolean
                  description: Whether the payment is completed.
                  example: true
                bookedAt:
                  type: string
                  format: date-time
                  description: Booking time.
                  example: "2024-12-30T08:00:00Z"
                noOfSeats:
                  type: number
                  description: No of seats in the bus.
                  example: 49
      responses:
        '200':
          description: Seat reserved successfully.
        '500':
          description: Internal server error.

  /commutor/viewUserReservations:
    get:
      tags:
        - Commuter
      summary: View user reservations
      description: Retrieve all reservations made by a specific user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user reservations.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    runTimeId:
                      type: string
                      description: Runtime ID of the bus.
                      example: "R12345"
                    busid:
                      type: string
                      description: Bus ID.
                      example: "B12345"
                    busNo:
                      type: string
                      description: Bus number.
                      example: "NY1234"
                    businessName:
                      type: string
                      description: Business name of the bus operator.
                      example: "Express Transport"
                    startTime:
                      type: string
                      format: date-time
                      description: Start time of the trip.
                      example: "2024-12-30T08:00:00Z"
                    endTime:
                      type: string
                      format: date-time
                      description: End time of the trip.
                      example: "2024-12-30T10:00:00Z"
                    startFrom:
                      type: string
                      description: Starting location.
                      example: "City A"
                    endFrom:
                      type: string
                      description: Ending location.
                      example: "City B"
                    seatNo:
                      type: array
                      items:
                        type: integer
                      description: List of reserved seat numbers.
                      example: [1, 2, 3]
        '500':
          description: Internal server error.

  /commutor/cancelReservation:
    post:
      tags:
        - Commuter
      summary: Cancel a reservation
      description: Cancel a reservation for a specific seat on a bus.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                runTimeId:
                  type: string
                  description: Runtime ID of the bus.
                  example: "R12345"
                seatNo:
                  type: integer
                  description: Seat number to cancel.
                  example: 1
                SeatPrice:
                  type: number
                  description: Price of the seat being canceled.
                  example: 1550
      responses:
        '200':
          description: Reservation canceled successfully.
        '500':
          description: Internal server error.
